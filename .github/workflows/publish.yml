name: Build site and deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup pages
        uses: actions/configure-pages@v4
      - name: Cache Swift build artefacts
        uses: actions/cache@v4
        with:
          path: .build
          key: swift-build-${{ runner.os }}-${{ hashFiles('Package.resolved') }}-${{ hashFiles('generate.swift') }}-${{ hashFiles('markdown.swift') }}
      # Always try to restore the Output directory and keep it updated.
      # https://github.com/actions/cache/blob/main/tips-and-workarounds.md#update-a-cache
      - name: Cache built site
        uses: actions/cache@v4
        with:
          path: Output
          key: output-${{ github.run_id }}
          restore-keys: |
            output-
      - name: Build site
        run: ./build.sh
      - name: Upload artefact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'Output'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
#      - name: Ping Micro.blog
#        run: curl -X POST "https://micro.blog/ping?url=https://douglashill.co/micro-feed.json"
